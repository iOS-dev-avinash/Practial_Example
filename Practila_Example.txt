
    * Extensions VS Inheritance *
	 
 1-> Extensions is a process of  adding additional property 
     and method in an existing class,structure,enum

 2-> Inheritance is a process of extending the class

 3->  to use additional functionality in case of Inheritance you must go for the subclass object not the superclass object

 4-> in case of Extensions by using the same class object to getting additional functionality and overriding is not allowed
 
 5-> store property is not allowed in Extensions computed property is allowed

 6-> Extensions is used for segrigate huge class in to small samll picesses 
 
 
	* Generics Type *
	
 1-> is a datatypes which is capable of holding any kind of values.
	Ex:	Array(holds group of ints,string,float )
		Set(holds group of ints,string,float)
 


   * Subscripts *

1-> Subscripts are the shortest way or altenative way of accessing elements of collection(Array,set)




        * Closures *
		
1-> is a datatypes to hold method or functional	
2-> closures are self-contained blocks of functionality that can passed around and used in your code
3-> block of code store in a single varible

		Ex: 
		let aInt:Int = 10
		let bInt:Int = 10
		func add(Int a,Int b)-> Int{
		 return a+b
		} 	
		let res = add(a:10,b:10)
         
		In Closures 
		let addClosure:(Int,Int)->Int = {(a,b)->Int in
		  
		  return a+b
		
		}
4 -> The base purpose of closures is for asyncronsally calling something

 like: suppose i hava a fetchdata method to fetching data from webservices assume that it may take  10 sec	if it is taking 10 sec controll should not be wating here it excute rest of code after 10 sec i received the response if response is succes or fail


5 -> closures can passed as a argument to a method

6 ->  when we use closures is whenever if you want a block of code to be excuted after some kind of time after getting something after doing something you want to excute that case  we write the closers 



  * Protocol *
  
 1-> a protocol defines a blueprint of method , properties 

 2-> the protocol can be adopted by a class,structure,or enumeration to provide an actual implementation of those requirements.
 
 3-> protocol is a  simpley set of method or rule decleration not implementation

 
 
 * Design Pattern *
 
 def: Design pattern is used to structuring your project into modules and establishing effective communucation bttween those modules of the application.
 
 
 * advantages of Design Pattern *
1-> scalability ,modulerity ,meantainance,testability.


 Types of Design Pattern :-
  1-> architecture DP 
   -> is used for segrigate application in to different mofule 
   -> MVC,MVP,MVVM,VIPER
   
  
  2-> General Design Pattern
   -> is used to effective or proper  communucation bttween those module
   -> Singletone,Delegation,Observer,NotificatonCentre
 
 *   MVC  *
 
	-> Model is Data/Database
	-> View is a User Interface
	->Controller is mediator between Model and View 
	-> controller contains business logics.
	-> Model and view does not communucation directely
 Advantages:-
	-> Object Reuse
	-> Independent Objects
	
 *  Singletone *
	
	-> only one instance of a class exits in entire application life cycle
 
  Advantages :-
	-> Singletone makes easy to share the data accross application
	-> Memory allocate only once time
	-> we can not create multiple objects
	
	Ex: class UserManager{
	static var sharedUser:UserManager = UserManagr() // create instance of same class inside only so that we can access userName and phNo
	var userName:String = ""
	var phNo:Int=0
	private init(){ //private because no one can create object from outside
	
	}
	
	}
	
	
  *	Delegation *
	-> is a process of assigning some work to another objects
	-> Data passing from one object to another object
	->delegation is one to one cummunication.
	->
	->Delegate object must be declared as weak to avoid retain cycle.
	
	RetainCycle:- RetainCycle is the process of two objects pointing strongly (Strong) each othes.
				
	


	
	
	
	
	
	
   * 	Concurrency / Multitasking  / Parallay *
   
   1->  Concurrency is a process of excuteing multiple task as the same time 
   
   
   ex: assume that i have two task t1 and t2 i want to excute t1 and t2 if you use normal mechanisum if you pass t1 first and t2 second the t1 is excute first and then t2 task 
   
   
   i want excute tak t1 and t2 parally parally means switching task t1 and t2 this mechanisum is achived by Concurrency 
   
   
   There are two types of Concurrency ()
   
   1-> Dispatch Queues (GCD)
   2-> Operation Quesue
   3-> Threads
   
   Why we use Concurrency:- better user experence ,perform any heavy tasks , handle some IO ,doing these kind of operations in the UIThread app Freeze , making non responsive  
   
   
   on iphone 6 onward iphone has multcore procssor that allow to developer to excute multiple task in parallel.
   
   
   * GCD  *
   
   1-> low level/karnal lavel/ unix lavel API .
   2-> GCD is most commonly used API to manage concurent code excute operation asyncronsally at the unix lavel .
   3-> GCD manage queue of task.
   
   * Dispatch Quesue * 
   Dispatch Quesue are easy way to perform multiple task asyncronsally and concurently in your application.

    Types of dq
   1-> serial queue  : only one task excute at a time
   we can excute task concurent by using multiple serial queue
   
   Advantages of serial queue: Guaranteed serialized access , predictable order tasks,
   
   2-> concurent queue :
   multiple task in parallel wa,
   will not know the order of excution.
   dont hava to wait for each othe task.
   
   
   basically to achived concurency use three mechanisum 1) GCD 2)Operation Q 3) Threads.
   gcd and Operation q are internally they Threads, GCD has 5 Quesue one is Serial Q and 4 concurent q .
   
   By defults operting system provide single Serial Q and 4 Concurent q 
   
   The main dispatch queue is a globally avilable serial queue.
   
   it use to update the UI Component of app and perform all task related to the update of UIViews.
   
   There is only one task to be excuted at a time and this is why the UI is blocked when you run heavy task in the main queue.
   
   
   The system provide 4 concurent Q  well call them Global Dispatch queues.
   
   These queue are global to application and are different only by priority level.
   
   
   
   
   
   * Diff Between GCD VC Operation Quesue
   
   GCD                 ||         Operation Q
   
   low lavel API       ||      High lavel API
   
   Concurent Excutions ||  Concurent Excutions but in an Object orinted fashion
   
   partial syncrones   ||  Highly ASync because it has no serial q
   
   No Depedency        ||  allow to set dependancy on operation.
					   
   Dont conform FIFO   ||   allow taks resume,cancel,restart.  				   
					   
   

   * Practial Example *
   
   1-> Dispatch queue
  
 Class ViewController:UIViewController {
 
	viewDidLoad(){
	
	//task1();  task1 finish then task2
	//task2();
	
	if you want to excute task1 along with task2 use concurent queue :excution  controll switching
	
	let queue = DispatchQueue.global(qos:.default)
	queue.async{ [weak self] in 
	
	self.task1()
	}
	queue.async{ [weak self] in 
	
	self.task2()
	}
	
	}
	
	func task1(){
	for i in 1...50000{
	print("task------1")
	
	/if you wnat to use user interface logic or update ui then use mainQue:
	DispatchQueue.main.async{
	
	 use for  user interfce logic
	  // 
	}
	}
	}
	
	
	}
	func task1(){

	print("task------2")
	}
	
	
	}
	
	
 
 }
   
  2-> Operation Quesue
  
  
  Operation :-is a abstraction class means you cannot create instance of a that class or it has method decleration not defination.
  
  BloackOpreation:-
  
Class ViewController:UIViewController {
 
	viewDidLoad(){
	
	//task1();  task1 finish then task2
	//task2();
	
	if you want to excute task1 along with task2 use concurent queue :excution  controll switching
	
	let queue = OprationQueue()
	let task1 = BlockOpration{[weak self] in
	self.task1();
	
	}
	let task2 = BlockOpration{[weak self] in
	self.task2();
	
	}
	queue.addOpration(task1)  
								-> t1 and t2 excute concurently
	queue.addOpration(task2)
	
	
	// you can add set dependancy
	
	task2.addDependancy(task1) // means task1 complete then task2
	
	
	// or you can add completion handler 
	
	task1.completionBlock = {
	
	print("task1 is completed")
	
	}
	
	}
	
	func task1(){
	for i in 1...50000{
	print("task------1")
	
	/if you wnat to use user interface logic or update ui then use mainQue:
	DispatchQueue.main.async{
	
	 use for  user interfce logic
	  // 
	}
	}
	}
	
	GCD is faster than OperationQueue
	
	GCD is more efficent than OperationQueue bacause it takes less excute time 
	
	if you want to have dapendancy, or maximum running operation or completion block
	
	if you want to  have more controll over the oprations you must go for operation queue.
	
	}
	func task1(){

	print("task------2")
	}
	
	
	}
	
	
 
 }
   




  * What is Diff Between Swift VC ObectiveC  *
  
  1->simple to read and learn
  2->Type Safe (no need to declare variable dataType its automatically );
  3->Less code
  4->No pointer to confuse
  5->Option make application crash free and bug free.
  6->swift Protocall Oriented Programming language .
  
  * Whats new in swift 5 *
  
  1-> Swift 5 is source compatible with Swift 4.2, but isn’t binary compatibl
  
  2-> Swift 4.2 uses escape sequences to represent backslashes and quote marks in strings:
  
  Ex:-
  let escape = "You use escape sequences for \"quotes\"\\\"backslashes\" in Swift 4.2."
  let multiline = """
                You use escape sequences for \"\"\"quotes\"\"\"\\\"\"\"backslashes\"\"\"
                on multiple lines
                in Swift 4.2.
                """
	
   Swift 5 adds raw strings. You add # at the beginning and end of the string so you can use backslashes and quote marks without issue

  Ex:
let raw = #"You can create "raw"\"plain" strings in Swift 5."#
let multiline = #"""
                You can create """raw"""\"""plain""" strings
                on multiple lines
                in Swift 5.
                """#
  
  
     
  
  * What is Optional *
   
   optional is holding nil or value;
   
   * what is Optional unwraping *
   
   ->is a technics to unboxing optional variable value
   
    types :- 
	1 -> implicit Optional unwraping ()
	2 -> Force unwraping.
	3 -> Explicit Optional unwraping.
	
	
    * Optional binding *	
	
	it is optional unwraping technics
	1-> if let -> unwraped value in optional binding is accessible with in that block
	
	2-> guard optional unwraping technics -> unwraped value in optional binding to the below statements;
	
	* Optional changing *	
	
	is a process of accessing optional sub property which are again optionals.
	
	
	* nil coalesing operator * 
	
	Provide Default Value
	
	
	*  Memory Management  *
	
	memory management means how much time the object should be avilabel in a memory.
	
	memory management is handle by ARC  
	
	ARC is keep track of instance properties
	
	ARC is used for intilise deintialise system resources 
	
	when the class instance is no longer needed it automatically free the memory space by dinit() 
	
	Case to Handle by Developer 
	
	Person		       Pen       Person             Pen 
        	--->strong 					--->strong
			strong<---					weak--->
			
			
    Retain Cycle:-	When two objects are pointing to eachother strongly,ARC cant find a way of released  them .in a situations Memory leaks happen.	
	
	* Strong  Property *
	-> all references are strong by default
	
	
	
	
	* Web Services *
	
	-> Web Services is a way of exchanging data over network between two or more application.
	
	->  Web Services is a way of interacting with remote web server 
	
	Process -> 1St --> prepare URL Request from clint side 2nd -> send Request by using URLSession or Almofire/AFNetworking 3rd--> server processes the request and pull data from database 4th--> Server send data/response if success or error if fail  to back to the application 5th-->clint processes the data (using NSJsonSerilazation/JSONDecoder/Codable)
	
	
	The communication between clint and server happen two ways 
	
	Architecture at serverside
	
	1-> Restfull (Json/XML)(Light weight)(simple parse to data)
	2-> SOAP (XML)(Heavy wight)
	
	URL Structure =- host name_ path_quary
	
	URLSession object create a session and takes a task as a parameters
	creating session 
	let session = URLSession.shared(Standard)
	let session = URLSession.emphemerl(autheentication)
	
	Three different class for creating task 
	
	URLSessionDask
	URLSessionDownloadTask
	URLSessionUploadTask
	
	
	
  * Core Data *
  
  core data is a persistance store , it is object orinted
  core data use internally SQLite 
  Feature:- core data is an  faster 
  
  how core data work
  
  
     Managed Object Context   <-----> Managed Object
             |
			 |
      Persistance Store Coordinator
			 |
			 |	
	    Persistance
	        Store
			 |
			 |
	  Managed Object Model(Sqlite/XML)		 
	
	
	
	
	
	
	
	
	
	
	
	
	Interview Questions on iOS App and UIViewController Life Cycle

What is AppDelegate class?
AppDelegate is a class in iOS Application which is responsible to handling the application life cycle methods.

What are the iOS Application Lifecycle Methods?
func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) -> Bool { }
func applicationWillEnterForeground(_ application: UIApplication) { }
func applicationDidBecomeActive(_ application: UIApplication) { }
func applicationWillResignActive(_ application: UIApplication) {} 
func applicationDidEnterBackground:(UIApplication *)application { }
func applicationWillTerminate(_ application: UIApplication) { }

What is launching options parameter dictionary in didFinishLaunchingWithOptions method?
iOS application can be launched by tapping the app on the App icon, from other application and Notification etc. The launching options dictionary contains the information that is caused to the application launch.

What are the Application States ?
Not-Running: App is just installed into the device and not executing any code.
Active: Application is in foreground and executing some code
In-Active: Application is in foreground and not executing any code(Ex. Incoming calls, messages, reminders etc)
Background: Application is in background and running some code.
Suspended: Application is in background and not running any code (Sleep Mode).

When the applicationWillTerminate method gets called?
Application is in suspended state and other running applications in need of memory then the iOS system terminates the suspended apps in the background. This method gets called before the application gets terminated.

What are the ViewController’s life cycle methods?
open func loadView() // This is where subclasses should create their custom view hierarchy if they aren't using a nib. Should never be called directly.
open func viewDidLoad()
open func viewWillAppear(_ animated: Bool) // Called when the view is about to made visible. Default does nothing

open func viewDidAppear(_ animated: Bool) // Called when the view has been fully transitioned onto the screen. Default does nothing

open func viewWillDisappear(_ animated: Bool) // Called when the view is dismissed, covered or otherwise hidden. Default does nothing

open func viewDidDisappear(_ animated: Bool)

What is the UIApplicationDelegate ?
UIApplicationDelegate is a protocol where all the application lifecycle methods are declared.

What is the super class of AppDelegate?
UIResponder

Can we have multiple Windows in an iOS Application?
Yes but Majority (99%) of the times we will have only one window.

What is the class hierarchy of AppDelegate class?
AppDelegate  UIResponder -> NSObject

What is the class hierarchy of UIView ?
UIView -> UIResponder -> NSObject

What is the class hierarchy of UIButton ?
UIButton -> UIControl -> UIView -> UIResponder -> NSObject

What is the Root Class in iOS?
NSObject

How to Map / Connect UIElements to the ViewController?
Use IBAction and IBOutlets to connect UIElements which are there in Storyboard to ViewController.swift class 

What is @IBOutlet?
IBOutlet is a keyword which is used to connect UIElement references to the UIElements in the storyboard

What is @IBAction? 
@IBAction is used to connect a ViewController’s method to the Active elements in the storyboard
What is the weak keyword in declaration of an Outlet in VC?
weak keyword avoids retain cycle.
Can we use multiple storyboards in an Application?
     Yes

	
   
   
   
Why we use weak  
whenever any class references is not used then it null or released memory like flush that the resion we used weak

         *Delegate design pattern *


import UIKit
import PlaygroundSupport
PlaygroundPage.current.needsIndefiniteExecution = true

//Thank you for downloading the code I hope this helps you in learning and implementing clean code in your project. Feel free to ask me any questions and do subscribe to the channel :) ~ CodeCat15

protocol AdditionResultDelegate : class
{
    func didFinishAddingTwoNumbers(result: Int)
}

class Developer
{
    weak var managerReference: AdditionResultDelegate?

    func developerWillAddTwoNumber(a: Int, b: Int)
    {
        let result = a + b
        managerReference?.didFinishAddingTwoNumbers(result: result)
    }
}

class Manager : AdditionResultDelegate
{
    var developer: Developer?

    init(_developer: Developer) {
        developer = _developer
        developer?.managerReference = self
    }

    func didFinishAddingTwoNumbers(result: Int)
    {
        debugPrint("result of addition = \(result)")
    }

    func addTwoNumber(x: Int, y: Int)
    {
        developer?.developerWillAddTwoNumber(a: x, b: y)
    }
}

let objManager = Manager(_developer: Developer())
objManager.addTwoNumber(x: 10, y: 10)


		 
  
  
  
  
  /* Disadvantages Of Singletone  Patern */
  
  -> One frequent concern with singletons is that often they’re not thread safe 
  as singletons are often used from multiple controllers accessing 
  the singleton instance at the same time. 
  import Foundation
import PlaygroundSupport

PlaygroundPage.current.needsIndefiniteExecution = true

var value: Int = 2

let concurrentQueue = DispatchQueue(label: "queue", attributes: .concurrent)

concurrentQueue.async {
    for i in 0...3 {
        value = i
        print("\(value) ✴️")
    }
}

concurrentQueue.async {
    for j in 4...6 {
        value = j
        print("\(value) ✡️")
    }
}

concurrentQueue.async {
    value = 9
    print(value)
}

concurrentQueue.async {
    value = 14
    print(value)
}

out put = 4 4 9 1

 In this example, multiple threads trying to manipulate value variable at
 the same time and because of that wrong value is getting printed.
 
 This is a race condition or classic readers writers problem where blocks on many queues 
 are trying to modify mutable value. As a result of this it’s printing wrong value in block. 
 Singletons create hidden dependencies.
 
 
 
  
  
  
  
  
 What's the difference between custom class and file's owner setting in xib file?
 
 
 
 We can see that File's Owner object is one of the most important objects in a nib file, and File's Owner is a placeholder object,
 and is NOT created when the nib file is loaded. File's Owner object must be created by yourself and
 you need to pass it to the nib-loading code to recreate the link of the code and the contents of a nib file.
 We can tell the File's Owner object can be NSObject in the Xcode and
 when you link your UI elements with your code (most of the time it is the ViewController class), 
 the File's Owner object is specified (and it is your ViewController instance).
 
 
 
 
 Whats new in swift 5
 
 1. ABI Stability
 ABI stands for Application Binary Interface.
It enables binary compatibility between apps and libraries compiled with different Swift versions.
So far every iOS application ships its own Swift version.
 This is because Swift isn’t available as a part of the iOS itself.
 
 2. Raw Strings Literals
 
 3. Integer Multiples  
 if myNumber % 2 == 0 {
    print("number is multiple of 2")
}
 
 4. Flatten Optional try?  let messages = try? person?.getName()
 
 5.Handle Future Enum cases
 
 
 
 * What is Weak:
 Weak keyword does not increase the reference count of the object 
 weak keyword avoids retain cycle.
 whenever any class references is not used then it null or released memory like flush that the resion we used weak
 
 exp :
 let aMobile = Moblie()
 let bMoblie = aMobile
 
 
 
 
 
 */ How to access private variable of a class out side?
 == You can acess private variable Using KVC  
 
 
 Class Mobile:NSObject {
	private var model:Int = 2018;
 }
 
 let myMobile = Mobile()
 myMobile.model = 2019 // it gives error private member can not access out side  class
 myMobile.value(forKey:"model")
 myMobile.setValue("2019",forKey:"model");
 
 
 
 /*                                  */

	As Structures are of value type we
	cannot modify the properties directly.
The compiler also helps us with the possible solution

It clearly states that adding mutating keyword to 
any function in value type can enable them to modify the variable.

Example:

struct Employee {
    var name : String
    var teamName : String
init(name: String, teamName: String) {
        self.name = name
        self.teamName = teamName
    }
mutating func changeTeam(newTeamName : String){
        self.teamName = newTeamName
    }
    
}

//* Escaping vs Non Escaping Closures  *//

   @escape : keyword to indicate that the closers will be called after some 
    time of control came out of method.
   
   @nonescape : A closers which is passed as an argument to a method
               That closers gets called before the excution control comes 
                out of the method is called non-escape closure.

   By Default all closers are non-escaping closure.
   
   
   Example :
   
   class Closures {
   
   var someValue = 10
   
   func methodThatExceprts(completion:(int,int)->Int){
   
   let result = completion(10,20);
   
    print(result)
	
   }
   
   func callClosure(){
      methodThatExceprts{ [weak safe] (a,b) -> Int in
	   self.someValue = 20
	   return a + b
	   
	  
	  }
   }
   
   
    
   
   }
   
   				
	
 
 
 
 
 